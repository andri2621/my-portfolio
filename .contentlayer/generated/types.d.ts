// NOTE This file is auto-generated by Contentlayer
import type {
  Markdown,
  MDX,
  ImageFieldData,
  IsoDateTimeString,
} from 'contentlayer/core';
import * as Local from 'contentlayer/source-files';

export { isType } from 'contentlayer/client';

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString };

/** Document types */
export type Author = {
  /** File path relative to `contentDirPath` */
  _id: string;
  _raw: Local.RawDocumentData;
  type: 'Author';
  title: string;
  description?: string | undefined;
  avatar: string;
  twitter: string;
  /** MDX file body */
  body: MDX;
  slug: string;
  slugAsParams: string;
  readingTime: string;
  wordCount: number;
};

export type Blog = {
  /** File path relative to `contentDirPath` */
  _id: string;
  _raw: Local.RawDocumentData;
  type: 'Blog';
  title: string;
  description?: string | undefined;
  publishedAt: IsoDateTimeString;
  updatedAt?: IsoDateTimeString | undefined;
  isPublished: boolean;
  banner: string;
  tags?: string[] | undefined;
  authors: string[];
  /** MDX file body */
  body: MDX;
  slug: string;
  slugAsParams: string;
  readingTime: string;
  wordCount: number;
};

export type Doc = {
  /** File path relative to `contentDirPath` */
  _id: string;
  _raw: Local.RawDocumentData;
  type: 'Doc';
  title: string;
  description?: string | undefined;
  published: boolean;
  /** MDX file body */
  body: MDX;
  slug: string;
  slugAsParams: string;
  readingTime: string;
  wordCount: number;
};

export type Project = {
  /** File path relative to `contentDirPath` */
  _id: string;
  _raw: Local.RawDocumentData;
  type: 'Project';
  title: string;
  description?: string | undefined;
  published: boolean;
  image?: string | undefined;
  /** MDX file body */
  body: MDX;
  slug: string;
  slugAsParams: string;
  readingTime: string;
  wordCount: number;
};

/** Nested types */

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes;
export type AllTypeNames = DocumentTypeNames | NestedTypeNames;

export type DocumentTypes = Author | Blog | Doc | Project;
export type DocumentTypeNames = 'Author' | 'Blog' | 'Doc' | 'Project';

export type NestedTypes = never;
export type NestedTypeNames = never;

export type DataExports = {
  allDocuments: DocumentTypes[];
  allDocs: Doc[];
  allBlogs: Blog[];
  allProjects: Project[];
  allAuthors: Author[];
};

export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes;
  documentTypeMap: DocumentTypeMap;
  documentTypeNames: DocumentTypeNames;
  nestedTypes: NestedTypes;
  nestedTypeMap: NestedTypeMap;
  nestedTypeNames: NestedTypeNames;
  allTypeNames: AllTypeNames;
  dataExports: DataExports;
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Author: Author;
  Blog: Blog;
  Doc: Doc;
  Project: Project;
};

export type NestedTypeMap = {};
